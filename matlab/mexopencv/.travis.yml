#
# Travis CI build script.
# https://travis-ci.org/kyamagu/mexopencv
#

language: cpp

compiler:
  - gcc
  #- clang

os:
  - linux
  #- osx

# Ubuntu 14.04 LTS Server Edition 64-bit (trusty)
#dist: trusty

# Ubuntu 12.04 LTS Server Edition 64-bit (precise)
sudo: required

# whitelisted branches to build
branches:
  only:
    - master

# global environment variables
env:
  global:
    - MCV_ROOT=$(pwd)
    - OCTAVERC=$HOME/.octaverc
    - OCTAVE_OPTS="--no-gui --no-window-system"
    # whether to install Octave Forge packages. They are optional, tests will
    # simply skip if needed packages are not detected. Note that the latest
    # octave-image fails to compile with gcc-4.6 as it needs C++11 support.
    - OCT_STATS=yes
    - OCT_IMAGE=no
    # common options for make
    - MAKE_OPTS="WITH_OCTAVE=true WITH_CONTRIB=true NO_CV_PKGCONFIG_HACK=true"
    # Extra make arguments
    # (avoid using too many parallel jobs, as it could starve memory!)
    - MAKE_EXTRA=-j2
    # whether to generate doxygen HTML documentation
    - DOXY=yes
    # path where OpenCV is installed
    - INSTALL_PREFIX=/usr/local
    # CMake generator, one of:
    # - Unix Makefiles: GNU Make
    # - Ninja: usually faster than make
    - CMAKE_GEN=Ninja

install:
  # add PPAs
  - sudo add-apt-repository -y ppa:octave/stable
  - sudo add-apt-repository -y ppa:kalakris/cmake
  - sudo apt-get update -qq

  # install Octave 4.0.2
  - sudo apt-get install -y octave liboctave-dev
  # install image and statistics packages used by some tests
  - if [ "$OCT_STATS" = "yes" ]; then octave-cli $OCTAVE_OPTS --eval "try, pkg install -forge -local io statistics, end" ; fi
  - if [ "$OCT_IMAGE" = "yes" ]; then octave-cli $OCTAVE_OPTS --eval "try, pkg install -forge -local image, end" ; fi

  # install build tools (CMake, Ninja, pkg-config, Doxygen)
  - sudo apt-get install -y cmake pkg-config
  - if [ "$CMAKE_GEN" = "Ninja" ]; then sudo apt-get install -y ninja-build ; fi
  - if [ "$DOXY" = "yes" ]; then sudo apt-get install -y doxygen ; fi

  # show info about build tools
  - printenv
  - lsb_release -a
  - uname -a
  - $CXX --version
  - make --version
  - if [ "$CMAKE_GEN" = "Ninja" ]; then ninja --version ; fi
  - cmake --version
  - pkg-config --version
  - dpkg -s octave liboctave-dev
  - octave-cli $OCTAVE_OPTS --version
  - octave-cli $OCTAVE_OPTS --eval "pkg list"
  - if [ "$DOXY" = "yes" ]; then doxygen --version ; fi

  # install some dependencies for OpenCV
  - sudo apt-get install -y zlib1g-dev libjpeg8-dev libpng12-dev libtiff4-dev libjasper-dev libopenexr-dev libgdal-dev
  - sudo apt-get install -y libavcodec-dev libavformat-dev libswscale-dev
  - sudo apt-get install -y libxine-dev libv4l-dev libdc1394-22-dev libgstreamer0.10-dev libgstreamer-plugins-base0.10-dev
  - sudo apt-get install -y libgtk2.0-dev libtbb-dev libeigen3-dev

  # build OpenCV 3.1.0 from source (opencv + opencv_contrib)
  - mkdir $HOME/cv && pushd $HOME/cv
  - wget -O opencv.zip https://github.com/opencv/opencv/archive/3.1.0.zip
  - wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/3.1.0.zip
  - unzip opencv.zip > /dev/null
  - unzip opencv_contrib.zip > /dev/null
  - mkdir build && cd build
  - cmake -G "$CMAKE_GEN" -Wno-dev
      -DBUILD_DOCS:BOOL=OFF
      -DBUILD_EXAMPLES:BOOL=OFF
      -DBUILD_PACKAGE:BOOL=OFF
      -DBUILD_PERF_TESTS:BOOL=OFF
      -DBUILD_TESTS:BOOL=OFF
      -DINSTALL_C_EXAMPLES:BOOL=OFF
      -DINSTALL_PYTHON_EXAMPLES:BOOL=OFF
      -DWITH_CUDA:BOOL=OFF
      -DWITH_CUFFT:BOOL=OFF
      -DWITH_OPENCL:BOOL=OFF
      -DWITH_VTK:BOOL=OFF
      -DBUILD_opencv_apps:BOOL=OFF
      -DBUILD_opencv_cuda:BOOL=OFF
      -DBUILD_opencv_java:BOOL=OFF
      -DBUILD_opencv_python2:BOOL=OFF
      -DBUILD_opencv_python3:BOOL=OFF
      -DBUILD_opencv_ts:BOOL=OFF
      -DBUILD_opencv_viz:BOOL=OFF
      -DBUILD_opencv_world:BOOL=OFF
      -DBUILD_opencv_contrib_world:BOOL=OFF
      -DBUILD_opencv_matlab:BOOL=OFF
      -DBUILD_opencv_ccalib:BOOL=OFF
      -DBUILD_opencv_cvv:BOOL=OFF
      -DBUILD_opencv_hdf:BOOL=OFF
      -DBUILD_opencv_sfm:BOOL=OFF
      -DBUILD_opencv_structured_light:BOOL=OFF
      -DBUILD_opencv_surface_matching:BOOL=OFF
      -DCMAKE_BUILD_TYPE:STRING=RELEASE
      -DCMAKE_INSTALL_PREFIX:PATH=$INSTALL_PREFIX
      -DOPENCV_EXTRA_MODULES_PATH:PATH=$HOME/cv/opencv_contrib-3.1.0/modules $HOME/cv/opencv-3.1.0
  - cmake --build .
  - sudo cmake --build . --target install
  - popd

  # finish OpenCV installation
  - export PATH=$PATH:$INSTALL_PREFIX/bin
  - export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:$INSTALL_PREFIX/lib/pkgconfig
  - sudo sh -c 'echo "$INSTALL_PREFIX/lib" > /etc/ld.so.conf.d/opencv.conf'
  - sudo ldconfig

  # show cv pkg info
  - pkg-config --modversion opencv
  - pkg-config --cflags --libs opencv

before_script:
  # create .octaverc file (where we setup path and load required packages on start)
  #TODO: http://savannah.gnu.org/bugs/?45444, we also add private directories on path
  - touch $OCTAVERC
  - echo "crash_dumps_octave_core(false);" >> $OCTAVERC
  - echo "more off" >> $OCTAVERC
  - if [ "$OCT_STATS" = "yes" ]; then echo "try, pkg load statistics, end" >> $OCTAVERC ; fi
  - if [ "$OCT_IMAGE" = "yes" ]; then echo "try, pkg load image, end" >> $OCTAVERC ; fi
  - echo "warning('off', 'Octave:GraphicsMagic-Quantum-Depth');" >> $OCTAVERC
  - echo "warning('off', 'Octave:shadowed-function');" >> $OCTAVERC
  - echo "cd('$MCV_ROOT');" >> $OCTAVERC
  - echo "addpath('$MCV_ROOT');" >> $OCTAVERC
  - echo "addpath(fullfile('$MCV_ROOT','+cv','private'));" >> $OCTAVERC
  - echo "addpath(fullfile('$MCV_ROOT','opencv_contrib'));" >> $OCTAVERC
  - echo "addpath(fullfile('$MCV_ROOT','opencv_contrib','+cv','private'));" >> $OCTAVERC
  - cat $OCTAVERC

script:
  # compile mexopencv
  - cd $MCV_ROOT
  - make $MAKE_OPTS $MAKE_EXTRA all contrib

  # build docs
  - if [ "$DOXY" = "yes" ]; then make $MAKE_OPTS doc ; fi

  # print cv build info
  - octave-cli $OCTAVE_OPTS --eval "path, disp(cv.getBuildInformation())"

  # run test suite
  - make $MAKE_OPTS test
