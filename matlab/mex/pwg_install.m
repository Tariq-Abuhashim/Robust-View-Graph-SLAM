function pwg_install()
%pwg_install( )
%
% A consule to compile and test mex files under construction
% This function uses the batch image optimisation class PwgOptimser
%
% Tariq Abuhashim
% t.abuhashim@gmail.com
%
% Koroibot, iCub Facility, Istituto Italiano di Tecnologia
% Genova, Italy, 2016

	config_install;
	
	if isempty(suitesparse)
		% Compile without SuiteSparse.
		fprintf ('\n   Recompile using SuiteSparse ....\n') ;
		fprintf ('\n   run gp_install(path/to/SuiteSparse\n') ;
		
	elseif isempty(vgslam)
    	% Compile without vgslam.
		fprintf ('\n   Recompile using vgslam ....\n') ;
		fprintf ('\n   run gp_install(path/to/vgslam\n') ;
		
	else
	
		v = getversion ;
		details = 0 ; % 1 if details of each command are to be printed
		try
			% ispc does not appear in MATLAB 5.3
			pc = ispc ;
		catch
			% if ispc fails, assume we are on a Windows PC if it's not unix
			pc = ~isunix ;
		end
	
		d = '' ;
		if (~isempty (strfind (computer, '64')))
			% 64-bit MATLAB
			d = '-g -largeArrayDims' ;
			if v >= 7.8
				d = [d ' -DLONG -D''LONGBLAS=UF_long'''];
			end
		end

		%-------------------------------------------------------------------------------
		% SuiteSparse option
		%-------------------------------------------------------------------------------
		include = '-I../../CHOLMOD/MATLAB -I../../AMD/Include -I../../COLAMD/Include -I../../CCOLAMD/Include -I../../CAMD/Include -I../include -I../../UFconfig' ;

		if (v < 7.0)
			% do not attempt to compile CHOLMOD with large file support
			include = [include ' -DNLARGEFILE'] ;
		elseif (~pc)
			% Linux/Unix require these flags for large file support
			include = [include ' -D_FILE_OFFSET_BITS=64 -D_LARGEFILE64_SOURCE'] ;
		end

		if (v < 6.5)
			% logical class does not exist in MATLAB 6.1 or earlie
			include = [include ' -DMATLAB6p1_OR_EARLIER'] ;
		end
		
		%-------------------------------------------------------------------------------
		% METIS option
		%-------------------------------------------------------------------------------
		% Determine the METIS path, and whether or not METIS is available
		metis_path = [suitesparse 'metis-4.0'] ;
		have_metis = (~isempty (metis_path)) ;
		% fix the METIS 4.0.1 rename.h file
		if (have_metis)
			fprintf ('Compiling CHOLMOD with METIS on MATLAB Version %g\n', v) ;
			f = fopen ('rename.h', 'w') ;
			if (f == -1)
				error ('unable to create rename.h in current directory') ;
			end
			fprintf (f, '/* do not edit this file; generated by cholmod_make */\n') ;
			fprintf (f, '#undef log2\n') ;
			fprintf (f, '#include "%s/Lib/rename.h"\n', metis_path) ;
			fprintf (f, '#undef log2\n') ;
			fprintf (f, '#define log2 METIS__log2\n') ;
			fprintf (f, '#include "mex.h"\n') ;
			fprintf (f, '#define malloc mxMalloc\n') ;
			fprintf (f, '#define free mxFree\n') ;
			fprintf (f, '#define calloc mxCalloc\n') ;
			fprintf (f, '#define realloc mxRealloc\n') ;
			fclose (f) ;
			include = [include ' -I' metis_path '/Lib'] ;
		else
			fprintf ('Compiling CHOLMOD without METIS on MATLAB Version %g\n', v) ;
			include = ['-DNPARTITION ' include] ;
		end

		%-------------------------------------------------------------------------------
		% BLAS option
		%-------------------------------------------------------------------------------
		% This is exceedingly ugly.  The MATLAB mex command needs to be told where to
		% fine the LAPACK and BLAS libraries, which is a real portability nightmare.
		if (pc)  
		else
			if (v < 7.5)
				lapack = '-lmwlapack' ;
			else
				lapack = '-lmwlapack -lmwblas' ;
			end
		end

		%-------------------------------------------------------------------------------

		cholmod_path = [suitesparse 'CHOLMOD/'];
		include = strrep(include, '../../', suitesparse);
		include = strrep(include, '../', cholmod_path);
		include = strrep(include, '/', filesep);
		include = [include ' -I' vgslam 'optimise/include -I' eigen];
		
		if 1; % Debugging ....
			include, pause;
		end
		
		libs = ['-lcholmod -lcolamd -lccolamd -lamd -lcamd -lmetis -lsuitesparseconfig ',' -L' metis_path];
		
		kk = 0 ;
		
		matlab_src = {
			'mex_observation_model_inverse_depth', ...
			'mex_observation_model_inverse_depth_Mviews', ...
			'mex_observation_model_jacobian_inverse_depth', ...
			'mex_observation_model_jacobian_inverse_depth_Mviews', ...
			'mex_generate_constraints_info_Mviews', ...
			'mex_update_info_matrix_Mviews', ...
			'mex_compute_gate_inverse_depth_Mviews', ...
			'mex_constraints_addition_inverse_depth_Mviews', ...
			'mex_optimise_constraints_Mviews'
			};
			
		vgslam_src = {
			[vgslam 'optimise/src/PwgOptimiser.cpp'], ...
			[vgslam 'optimise/src/RecoverMoments.cpp']
			};
			
		if pc
			% compile mexFunctions
		else
			% compile mexFunctions
			for i = 1:length (matlab_src) 
				outpath = matlab_src{i};
				mex_src = [outpath '.cpp ' vgslam_src{1} ' ' vgslam_src{2}];
				s = sprintf ('mex %s -DDLONG -O %s -output %s %s', d, include, outpath, mex_src) ;
				s = [s ' '];
				s = [s libs];
				s = [s ' '];
				s = [s lapack];
				kk = do_cmd (s, kk, details) ;
			end
		end

		% clean up
		%s = ['delete ' obj] ;
		%do_cmd (s, kk, details) ;
		fprintf ('\nPWG_OPTIMISER package succesfully compiled \n') ;

	end

end

%-------------------------------------------------------------------------------
function kk = do_cmd (s, kk, details)
	%DO_CMD: evaluate a command, and either print it or print a "."
	if (details)
		fprintf ('%s\n', s) ;
	else
		if (mod (kk, 60) == 0)
			fprintf ('\n') ;
		end
    	kk = kk + 1 ;
    	fprintf ('.') ;
	end
	eval (s) ;
end

%-------------------------------------------------------------------------------
function v = getversion
	% determine the MATLAB version, and return it as a double.
	v = sscanf (version, '%d.%d.%d') ;
	v = 10.^(0:-1:-(length(v)-1)) * v ;
end
